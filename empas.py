#compile by xenz
#https://github.com/Xenz-11
import base64
exec(base64.b64decode("import os,sys,time,requests,random,string
from time import sleep as __xenz__turu__

P = '\x1b[1;97m' # PUTIH
M = '\x1b[1;91m' # MERAH
H = '\x1b[1;92m' # HIJAU
K = '\x1b[1;93m' # KUNING
B = '\x1b[1;94m' # BIRU
U = '\x1b[1;95m' # UNGU
BM = '\x1b[1;96m' # BIRU MUDA
N = '\x1b[0m'    # CLEAR
BL ='\033[30;1m' #
__ples__xenz__=(f'{H}[{U}+{H}]{K} ')
__centang__xenz__=(f'{H}[{P}√{H}]{B} ')
__eror__xenz__=(f'{H}[{M}!{H}]{P} ')
__tanya__xenz__=(f'{H}[{B}?{H}]{K} ')
__titik__xenz__=(f'{H}[{K}•{H}]{P} ')
os.system('clear')
def __xenz__jalan__(kontol):
	for wibu in kontol + "\n":
		sys.stdout.write(wibu)
		sys.stdout.flush()
		__xenz__turu__(0.008)
def __xenz__lari__(kontol):
	for wibu in kontol + "\n":
		sys.stdout.write(wibu)
		sys.stdout.flush()
		__xenz__turu__(0.001)
__logo__xenz__1__ = (f'''
\t{H}         _____   ______ _____ __   _
\t{H} |      |     | |  ____   |   | \  |
\t{H} |_____ |_____| |_____| __|__ |  \_|
''')
__logo__xenz__2__= (f'''
\t{K} _______ _______ {U} _____  _______ _______
\t{K} |______ |  |  | {U}|_____] |_____| |______
\t{K} |______ |  |  | {U}|       |     | ______|
\t{H}  created by {P}: {BM}xenz       {B}version {P}: {K}2.0
''')
__logo__xenz__3__ =(f'''
{BL}[{K}1{BL}]{BL} Update script
{BL}[{K}2{BL}]{BL} Langsung cari empas
{BL}[{K}3{BL}]{BL} Langsung cari empas fresh
{BL}[{K}4{BL}]{BL} Langsung cari empas uncheck
{BL}[{K}5{BL}]{BL} Langsung cari empas moonton
{BL}[{K}6{BL}]{BL} Donasi buat author
{BL}[{K}7{BL}]{BL} Exit
''')
def loading():
	for i in range(101):
		__xenz__turu__(0.03)
		print (f'\r{__titik__xenz__}Loading {K}{i}%',end='',flush=True)
print ('\n')

class key:
	def __login__(self):
		os.system('clear')
		__xenz__lari__ (__logo__xenz__1__)
		key = input(f'{__tanya__xenz__}Masukan key : {BM}')
		open('xenz-ganz','w').write(key)
		req = requests.get('http://happy.mikikk.co.jp/%s'%(key)).text
		if 'xenz' in req:
			__xenz__jalan__ (f'{__centang__xenz__}{H}Key benar >_<')
			__xenz__turu__(2)
		else:
			__xenz__jalan__ (f'{__eror__xenz__}Key salah\n{__ples__xenz__}Silakan follow instagram author dulu {H}https://bit.ly/3sYXPRw\n{__ples__xenz__}Lalu chat whatsaap {H}https://bit.ly/3sX5XCj')
			os.system(f'rm -rf {key}')
			sys.exit()
class mulai:
	def __menu__(self):
		os.system('clear')
		try:
			open('xenz-ganz','r').read()
		except IOError:
			__xenz__jalan__ (f'{__eror__xenz__}Kamu belum login')
			__xenz__turu__(2)
			key().__login__()
		try:
			_wibu_ = open('xenz-ganz','r').read()
			req = requests.get('http://happy.mikikk.co.jp/%s'%(_wibu_)).text
			if 'xenz' in req:
				loading()
				self.__empas__()
			else:
				__xenz__jalan__ (f'{__eror__xenz__}Kamu belum login')
				os.system('rm -rf xenz-ganz')
				__xenz__turu__(2)
				key().__login__()
		except KeyError:
			__xenz__jalan__ (f'{__eror__xenz__}Key salah')
			__xenz__turu__(2);key().__login__()
		except requests.exceptions.ConnectionError:
			__xenz__jalan__ (f'{__eror__xenz__}Koneksi anda bermasalah')
		try:
			aku = open('xenz-ganz','r').read()
		except IOError:
			aku = '-'
	def __nama__(self):
		nama=input(f'\n{__tanya__xenz__}Masukan Namamu : {BM}')
		namamu=open('nama.txt','w').write(nama)
		os.system('clear')
	def __empas__(self):
		os.system('clear')
		try:
			open('nama.txt','r').read()
		except:
			self.__nama__()
		try:
			IP = requests.get('https://api.ipify.org').text
			nm=open('nama.txt','r').read()
			peng=string.digits
			xz=[]
			for i in range(1637):
				xz.append(random.choice(peng))
				__xenz__turu__(0.003)
				xx=i+1
				print (f'\r{__ples__xenz__}Menghitung pengguna : {H}{xx}',end='',flush=True)
			__xenz__turu__(2)
			os.system('clear')
			apa=xx+1
			__xenz__lari__(__logo__xenz__2__)
			print (f'\t{__ples__xenz__}Total pengguna {P}: {H}{apa}')
			__xenz__jalan__ (f'\t{__ples__xenz__}Nama           {P}: {H}{nm}')
			__xenz__jalan__ (f'\t{__ples__xenz__}IP             {P}: {H}{IP}')
			__xenz__jalan__ (__logo__xenz__3__)
			pilih=input(f'{__tanya__xenz__}Chose : {BM}')
			if pilih == '1':
				os.system('git clone https://github.com/Xenz-11/empas-v2\ncd empas-v2\ngit pull\npython empas.py')
				__xenz__jalan__ (f'{__centang__xenz__}Upgrade selesai >_<')
				__xenz__turu__(2)
				mulai.__menu__()
			elif pilih == '2':
				os.system('wget https://raw.githubusercontent.com/fahmicog/fahmicog/main/DePsah/empas.txt -o done')
				a=open('empas.txt','r')
				__xenz__jalan__ (f'{__ples__xenz__}{P}klik {M}ctrl+c {P}untuk berhenti dump{H}\n')
				for x in a:
					__xenz__turu__(2)
					print(x)
				os.system('rm -rf empas.txt')
				nanya=input(f'{__tanya__xenz__}Mau dump lagi? y/t : ')
				if nanya == 'y':
					self.__empas__()
				elif nanya == 't':
					sys.exit()
				else:
					sys.exit()
			elif pilih  == '3':
				os.system('wget https://raw.githubusercontent.com/fahmicog/fahmicog/main/DePsah/empas-fresh.txt -o done')
				b=open('empas-fresh.txt','r')
				__xenz__jalan__ (f'{__ples__xenz__}{P}klik {M}ctrl+c {P}untuk berhenti dump{H}\n')
				for e in b:
					__xenz__turu__(2)
					print(e)
				os.system('rm -rf empas-fresh.txt')
				nanya=input(f'{__tanya__xenz__}Mau dump lagi? y/t : ')
				if nanya == 'y':
					self.__empas__()
				elif nanya == 't':
					sys.exit()
				else:
					sys.exit()
			elif pilih == '4':
				os.system('wget https://raw.githubusercontent.com/fahmicog/fahmicog/main/DePsah/empas-uncheck.txt -o done')
				c=open('empas-uncheck.txt','r')
				__xenz__jalan__ (f'{__ples__xenz__}{P}klik {M}ctrl+c {P}untuk berhenti dump{H}\n')
				for n in c:
					__xenz__turu__(2)
					print(n)
				os.system('rm -rf empas-uncheck.txt')
				nanya=input(f'{__tanya__xenz__}Mau dump lagi? y/t : ')
				if nanya == 'y':
					self.__empas__()
				elif nanya == 't':
					sys.exit()
				else:
					sys.exit()
			elif pilih == '5':
				os.system('wget https://raw.githubusercontent.com/fahmicog/fahmicog/main/DePsah/empas-monton.txt -o done')
				d=open('empas-monton.txt','r')
				__xenz__jalan__ (f'{__ples__xenz__}{P}klik {M}ctrl+c {P}untuk berhenti dump{H}\n')
				for z in d:
					__xenz__turu__(2)
					print(z)
				os.system('rm -rf empas-monton.txt')
				nanya=input(f'{__tanya__xenz__}Mau dump lagi? y/t : ')
				if nanya == 'y':
					self.__empas__()
				elif nanya == 't':
					sys.exit()
				else:
					sys.exit()
			elif pilih == '6':
				__xenz__jalan__ (f'{__titik__xenz__}Anda di arahkan ke whatsapp >_<')
				__xenz__turu__(2)
				os.system('xdg-open https://bit.ly/3Nt6Fid')
				__xenz__turu__(4)
				self.__empas__()
			elif pilih == '7':
				os.system('rm -rf empas.txt')
				os.system('rm -rf empas-fresh.txt')
				os.system('rm -rf empas-monton.txt')
				os.system('rm -rf empas-uncheck.txt')
				sys.exit()
			else:
				__xenz__jalan__ (f'{__eror__xenz__}Pilih yang ada di menu!')
				__xenz__turu__(2)
				self.__empas__()
		except KeyboardInterrupt:
			__xenz__jalan__ (f'{__eror__xenz__}Dump dihentikan')
			os.system('rm -rf empas.txt')
			os.system('rm -rf empas-fresh.txt')
			os.system('rm -rf empas-monton.txt')
			os.system('rm -rf empas-uncheck.txt')
if __name__ == '__main__':
	mulai().__menu__()
"))
